{"version":3,"sources":["logo.svg","components/TodoListItem.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoListItem","handleCheckboxChange","e","onChange","props","target","checked","this","done","text","type","React","Component","TodoList","loadData","a","setState","loading","errorMessage","fetch","response","ok","Error","statusText","json","todos","map","elem","id","message","handleTodoDone","index","newTodos","Array","from","state","method","headers","body","JSON","stringify","handleNewTodoChange","value","newTodo","handleNewTodoClick","trim","newTodoItem","savedTodoItem","push","className","onClick","onInput","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6936c7c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class TodoListItem extends React.Component {\r\n\r\n    handleCheckboxChange = (e) => {\r\n        const { onChange } = this.props;\r\n        if (onChange) {\r\n            onChange(e.target.checked);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { done, text } = this.props;\r\n\r\n        return <>\r\n            <input type=\"checkbox\" checked={done} onChange={this.handleCheckboxChange} />\r\n            <span>{ text }</span>\r\n        </>;\r\n    }\r\n}\r\n\r\nTodoListItem.propTypes = {\r\n    /** The text of the TODO item */\r\n    text: PropTypes.string.isRequired,\r\n    /** The TODO is done or not */\r\n    done: PropTypes.bool.isRequired,\r\n    /** Called when the user clicks on the TODO item */\r\n    onChange: PropTypes.func,\r\n};\r\n\r\n","import React from 'react';\r\nimport TodoListItem from './TodoListItem';\r\n\r\nimport './TodoList.scss';\r\n\r\nexport default class TodoList extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            errorMessage: null,\r\n            loading: true,\r\n            newTodo: '',\r\n            todos: [],\r\n        };\r\n    }\r\n\r\n    loadData = async () => {\r\n        this.setState({\r\n            loading: true,\r\n            errorMessage: null,\r\n        });\r\n        try {\r\n            const response = await fetch('http://localhost:8080/todos');\r\n            if (!response.ok) {\r\n                throw Error(response.statusText);\r\n            }\r\n            const todos = await response.json();\r\n            this.setState({\r\n                todos: todos.map(elem => {\r\n                    return {\r\n                        id: elem.id,\r\n                        text: elem.text,\r\n                        done: (elem.done == 1)\r\n                    };\r\n                }),\r\n                loading: false,\r\n                errorMessage: null,\r\n            });\r\n        } catch (error) {\r\n            this.setState({\r\n                errorMessage: error.message\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadData();\r\n    }\r\n\r\n    handleTodoDone = async (index, done) => {\r\n        const newTodos = Array.from(this.state.todos);\r\n        newTodos[index] = {\r\n            id: newTodos[index].id,\r\n            text: newTodos[index].text,\r\n            done: done,\r\n        };\r\n        const response = await fetch('http://localhost:8080/todos/' + newTodos[index].id, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(newTodos[index])\r\n        });\r\n        if (response.ok) {\r\n            this.setState({\r\n                todos: newTodos\r\n            });\r\n        }\r\n    }\r\n\r\n    handleNewTodoChange = (e) => {\r\n        const value = e.target.value;\r\n        this.setState({\r\n            newTodo: value,\r\n        });\r\n    }\r\n\r\n    handleNewTodoClick = async () => {\r\n        const { newTodo, todos } = this.state;\r\n        if (newTodo.trim() === '') return;\r\n\r\n        const newTodoItem = {\r\n            text: newTodo.trim(),\r\n            done: false\r\n        };\r\n\r\n        const response = await fetch('http://localhost:8080/todos', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(newTodoItem)\r\n        });\r\n\r\n        if (response.ok) {\r\n            const savedTodoItem = await response.json();\r\n            const newTodos = Array.from(todos);\r\n            newTodos.push(savedTodoItem);\r\n            this.setState({\r\n                todos: newTodos,\r\n                newTodo: '',\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.errorMessage) {\r\n            return <div className='error'>\r\n                { this.state.errorMessage }\r\n                <br/>\r\n                <button onClick={this.loadData}>Reload</button>\r\n            </div>\r\n        }\r\n\r\n        if (this.state.loading) {\r\n            return <div>Loading...</div>;\r\n        };\r\n        \r\n        return <div>\r\n            <div>\r\n                <input type='text' value={this.state.newTodo} onInput={this.handleNewTodoChange} />\r\n                <button onClick={this.handleNewTodoClick}>Add</button>\r\n            </div>\r\n            <ul className=\"TodoList\">\r\n                { this.state.todos.map((elem, index) => <li>\r\n                    <TodoListItem\r\n                        text={elem.text}\r\n                        done={elem.done}\r\n                        onChange={(done) => this.handleTodoDone(index, done)}\r\n                    />\r\n                </li>) }\r\n            </ul>\r\n        </div>\r\n    }\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}